- so I have decided to make a weird crud dating profile. NO functionality really just trying to implement some of the crud stuff
that I have learned.
- I basically just want a basic crud app, might spice things up later
- for the state, we can use as much as we like

- so now That we have the bare bones of the project, we are going to bring in some dummy data and map over it so our project can use it
- at the moment I think I need to define a css grid so the profiles fall inline.
- Now i will get back to the dummy data
- we then pass the dummy data which is now a state to our profile component, that will have access to it through props
- so now I need to map over that data and put the data where it needs to go

Rendering the list of data
- in Javascript we transform lists with the map() function. In react we do the same thing
- in React we can build collections of elements and include them in JSX using curly brackets.
- so Now that I think that I have to put the display:grid on the profiles className. Than seemed to work

- now I have decided that I want to create the add profile to be in the nav Bar and I want that NavBar to be responsive, That means
that I am currently creating a responsive NavBar. After that I want to profile creation form to pop up in a modal. So that will be
next on the list.
- now that I have a basic navbar I will create the modal that I want to pop up when I click on the create profile button
- so it looks like when we build the modal we are going to create a state with hooks to toggle the state. we will then pass that
data between coponents with props and have basic authentication when the user creates the component

- so now That we have the basics of the modal we need a way to toggle between the state of the modal, like show and hide
- now we create the state, which we will create with hooks
- now that we have the state hooked up we can do conditional rendering with our modal component
- now we have the conditional rendering down. We need to make the modal come out infront, with a little bit of css magic.
- so now that the position is absolute. we just need to make it look like a form
- I seem to be running into a problem of how to display my modal properly I think that it has something to do with the fact that
it is positioned absolute. So I will now check out more on that.

- with absolute positioning we are able to position it exactly where we want it. make sure not to over use it. This can be a maintenance
nightmare.
 - ok so I think I will just use the left, right and the rest to position it

 - so ya, to fix the modal, I just had to set the display to block, now I can go back to styling it like a normal form
 - so now we have the basics of the modal down, we will create the form submission stuff

 - we create a function to update the state within the form

 - so now we create the actual function that will add the new profile to the state, we have the setProfiles function automatically
 from useState, so that is what we will use to update the user state.
 -our add profile function will take a profile object as a parameter and then add them to the array of objects.
 - the ...profiles ensures that all the previous ones remain in the array.
 - ok so this function is literally just taking in an object,we are incrementing the key manualy by 1 and then we are adding
 that profile to the state
 - we then give this function to another component through the power of props and it will be used accordingly


 -so we have a function that adds a new user. we then pass that through the props system to the navBar component and then we pass
 it again to the modal form
 - then we create the form. now we have the form created
 - we are going to create an empty initial state, this is useful because when we submit the form, it can return to the initial state
 - on our form, we also have the conditional rendering.
 - so we do the object destructoring on the event object but I am not sure what values I am pulling out
 - so I ran into a problem where the form is not letting you type anything in. I think this has something to do with the value and
 the state. I think that onChange has to run when something is typed and then the value of the form inputs has to be changed to the
 state value.
 - I will read up more on states and values in the react documentation

HTML FORMS
- so initially an HTML form maintains their own state and update it based on the user input. In React, mutable state is typically kept
in the state property of components and only updated with setState

- so what we need to do is update the state based of the user input and then change the value of the input to the that state value
- ooohhhh ok so we pull the name and the value from the event object and then use that to update the state. just like the lady says

- so we have destructored the name and value form the input of the form and then we use the state hook to update the state.
- we then use the state to set the value of the form to the desired value of the state

- so we have to submit the form back to the app component. so we passed the function down with props, we are going to use props to
access the function. this funciton will fire when onSubmit is called. we should also write a small bit of validation
- so I need to read up on what happens when you pass a function through props and then call that function, I think it still does
everything it would normally do but I just need to read up a little more on it.
- ya so when we call a function that was passed down through props it will still perform normally as if it was called from
its original function.

-so lets write the on submit function.
- right now I am going to read up on form validation with javascript
-ok,so validation with javascript is literally get the value and check to make sure that it has the wanted value. you could also
use the html 5 validation
- ok so the value of an input should not be null, so the initial value of the props has to be changed. it can't be null but I guess that
undefined is fine.
- nevermind, it is still yelling at me. so I just have to set the age value of the state to an empty string. cool

- so I guess when I prevent the defualt of the form being submitted, it also stops my modal from being closed
- nevermind I found out what my problem was, I messed up some of the logic, so it always rendered nothing. Now it will work
- so I guess that the show property is a read only property

- Now We have the form some what under control and I think we can go from here.
- now we need to call the function that was in the props to set the new profile up.
- ok so our user value is not the problem.

- so my problem now is that the new object from the form is not being added to the state like I want. nothing is being added.
- so we know that It is beign called, the state is just not being updated. WHY?
- so my problem seems to be in my hook, I will
- so there appears to be something wrong with the hook, there appears to be somethign wrong with the the way that it sets itsself.
- I guess will have to read more about hooks and google around a bit

- my problem is one of stale state:

- any funtion inside a component, including event handler and effects "sees" the props and state from the render it was created

- it looks like it is a sort of bug that is cause from me not understanding how the hooks and state work. I am now reading up on it.
- props in react are immutable

- lets read the state hook docs before I go searching for stuff
- ok so you are only suppose to call hook sat top level and not in loops,conditionals or nested functions... which I am.
- this allows React to correctly preserve the state of Hooks between multiple useState calls

how does React know which state corresponds to which useState call?:
-react relies on the order in which Hooks are called
- the reason that I may be getting this bug is because React doesnt know what to render. I don't think this is the reason but maybe.
- so that wasnt the problem. I do not know why my things are not rendering.
- ok , so I found the problem. I was not that my state was stale and not rendering. I was just dumb and had the wrong value
inside of something.

- so now I have it working. I Think I will put some basic form validation on it.
- so I think that I will have a state that will be one for errors. we will want the error function to be in the onSubmit function
- so we want the function to do its validation and if anything goes wrong it will update the error value and then that will be displayed
- so we will make a function to do the error checking
- so I dont think we can do the error checking the way we wanted, because we are not allowed to call hooks in conditionals.


- so apparently I will be creating my own custom react Hook
- first we create a file called useForm. putting 'use' infront of Form is normal convention when creating custom hooks
- so on every form you are going to have a handleChange function and a handle submit function
- we take all the logic from the form and place it into the useForm file
- then we return all the things that our other functions need
- then we import the file from our normal form component
- ok so with a little luck, the hooks will still work
- I got the hooks in place but now nothing is working..... yay. ok lets just keep on chugging along until we figure this out.
- I think my problem is that I just havent called the addProfile function yet. so really small when you think about it.
- so with I think that we have it figured out now. lets try it out and see.
-perfect it works, now We can get onto the error handeling

- for our error validation we need a new state for the errors, which I was right about that. we also need a function that validates
those errors and need to pass those error back to the form.
- ok, right now I want to put a regex expression for someones height. I will now read up on regex expressions

regex expressions:
- I guess in javascript they are called regular expressions
- literals are between two slashes. so we need to match a digit than a quote thing and then another digit
- so I think that if I went /[3-7]\d this would only allow for a two digit number and the first number has to be greater than 3
- so the regex is less than or equal to the number that we specify.
- so now we just have to get the special character
- so we will be using a special character which means that we will be escaping it with a back slash.
- so for the sake of time right now we are not going to validate the the height and I will probably will delete it later.


- back to the main code, now we have to import the validate form code from the validate form file into our main file.
- we then pass that into the useForm.
- so we will call the setErrors function with the validate function as a parameter. the validate function will return an object of erros
which will then be used to update the error state.
- this is actually a really cool way to do this, because the way that I was doing it was dumb and had me trying to set the error in a
conditional statement which is a big no no

so what happens when we call submit:
- the onSubmit function gets called
- it prevents the default
- it resets the form to the blank value.
- setErrors is then called. this will then call the validate function with the current user values passed into it.
- the validate function will then check all of its functions and then it will return an object that setError will use to set its state

- so now we just have to handle the error messages, so our custom hook now returns the error object and then we should just be able
to use that to display the message is jsx
- we then use conditional rendering to make the message appear. I am going to have to read up on conditional rendering
because this guy is using the && operator in a weird way with jsx
- so he is using the && operator to conditionaly render a component. This works because true and an expression always evaluates to true
and false plus expression evaluates to false

- so we have ran into a problem where our form sibmits and resets its self and submits event if there is an error, I need to fix this
- ok so he is explaining it as we can then have another function called isSubmitting that will take more of the logic away and I Think
that this will fix my problem

- we now have a new state called isSubmitting, with an initial state of false. Then we call it in the submission and call it
with a value of true
- we then use the hook called useEffect, we will use useEffect to say that if errors are changing should we call all the other
functions.
- so now I need to read up on the use effect hook.


USE EFFECT HOOK
-It lets you perform side effects in function components. the useEffect hook can be throught of as all the component life cycle
methods combined.
- when you use this hook you are telling React that the component needs to do something after render. React will remember
the function that you passed it, it will then call it later  after perfoming the DOM updates
- it runs after both the first render and after every update. think "after render "
- effects scheduled with useEffect don't block the browser from updating the screen. THis makes things feels more responsive
- useEffect can take in two arguments, the first being a callback function that gets called when the hook runs and the second being
an array that allows us to tell React when we want our effect to be called. If you only want the effect to be called after the first
render, then you would pass an empty array.


-we will now create the isSubmitting function that will seperate some of the logic into a different function.
- we create isSubmitting,setIsSubmitting = useState(false)
- we then call the setIsSubmitting(true) after our error checks, this along with the useEffect hook will allow us to see if we
need to display errors or not
- we import useEffect

- we will then just check in useEffect to see if there are any errors if there are not, then we call all the normal functions that
we want. If there are, then we display the error messages
- this decouples are functions and makes things look a lot cleaner.
- so to check if there are errors or not, we have to check if the errors object is empty or not. to check if an object is empty or not
we have can pull the keys from the object, put them into an array and check to see if they are empty or not
- but first we have to set our error State to an empty object as the initial state. this means that it will only be populated if the
checkError function finds an error and populates it

- so after reading the documentation, when we provide a second argument to useEffect, it will use that argument to check and see if
that argument has changed, if it hasnt then it will not run, if it has than it will run
- so that doesnt fix the warning, which is unfortunate
- our effect depends on the error state and it needs to run after it changes
- so the simple way to fix this warning is to just add them to the the dependency but I don't really understand what that does
- ok so the reason that we need to put things inside the dependencies, seems to steam from a greater understanding of what functions
actualy do. I need to Read more about what functions actually do.


FUNCTIONS vs CLASS COMPONENTS:
functions capture state and props inside them.

- when you use a class component it is easy for the 'this' to mutate and change in unpredictable ways. This problem stems from reading
the props to late  in the function. You can solve this by capturing the props in the render method props = this.props

- function components capture the rendered values.

- props is never mutated by react, props are pure


- so it is difficult to remember which props or state are used by functions outside of the effect. so you would want to
declare functions that are used by useEffect inside of useEffect, thinga that come from outside of useEffect should be placed inside of
the dependency array
- so it is only safe to omit a function from the dependency list if nothing in it references props, state, or values derived from them


- so what we are going to do it just try it with only the error object in the dependencies. If it causes any bugs then we will deal with
them when they come out. But I dont think my app as enough working parts to cause a bug. well maybe when I try to implement the edit
button but we will cross that bridge when we get to it.



- we are currently getting a warning that states that useEffect has a missing dependency.
- This warning is coming from the linter telling us that we are depending on external values that may change

- so the form validation is now up and running.
- we can use ES6 templates to conditionally render class names. i guess to add another class name you can just add it with spaces.
- when I put in the css I noticed that I had a css rule that was over riding my form error css, so I had to use the important tag
to make the error css to supersede the other rule.

- but now I have completed the adding new user part of the project. I will now continue to the delete and edit part of the project.


DELETING A USER
- this is suppose to be the easiest. it is literally a function that takes the id that we give it and just filters out that profile
returning a new state.
- ok so now we have the deleting user down and created. Now we move on to editing an user, this will be a little harder.
- apparently we will be using the useEffect hook again

UPDATING A USER
-this will be similar to the adding a new user except we will have to be able to identify which user is being edited. For this
we will be using the Effect Hook
- we will create an initials empty state for the form.
- so we need to have an edit mode that is going to be the trigger for the state.
-now we are going to create the actual function that will get called when the edit form is submitted. this function needs to map
through the array and update the user that matches the ID passed through. This means the function will take two parameters.
the updated user object and the id, this will be done with a ternary operator

- so wtf is happening?
-so this function will be called when the editing form is submitted, it will take two parameters, the updated profile and the id of
the profile. it will then setEditing to false and use a terinary operator to map over the profile. this operator will say.
is the current profile id equal to the one we are editing? if so then return this new profile, if not. Then return the old user


- the next thing that we are going to do is create a new component for this editing form, it is basically going to be the same
as the other form with some slight changes.
- in typical react forms we need to turn the form into a controlled component. we do this by making the react state the single source
of truth. we set the value attribute on the form to the state and this is what makes the form a controlled component. we then combine
this with the function that is running when onChange is triggered. this means that the inputs value is always driven by the react state

- so for this new editing form I still want everything the same except I want the buttons to be different and fire different methods.
I guess on this little of an app it would probably just be easier to create a whole new application instead of trying to make my first
form more flexible and accidently braking something.
 - so I guess I am going to create a whole new form but still use the old validation.
 - so I guess that form input values are displayed inline.
 - right Now I want to get the form up and running without any validation, after I have it going I will add validation.
 - so now I have to create a toggle for displaying it.
 - so in this it seems that if you want something to display on a click you have to set a toggle and then check if that toggle is
 on or off and render accordingly. We will do the checking in this app with a ternary operator.
- so now I need to figure out what will actually happen when I press the edit button. When I press the edit button what I want to
happen is for the form to show up and for it to be filled with the current profile information but lets see what happens and why


WHAT HAPPENS WHEN I CLICK THE EDIT BUTTON :
- first when the application loads, I have some conditional rendering that is called when the render happens. It will check to see
if the editing state is true of false. since that state is set to false it will render nothing on the first render.
- we then pass the profile function an edit row function. this function will lets us set the Edit state to true and fill out the
current user form to the one that we clicked on.

- the button edit button that is on the profile component now has access to the editRow function through props. the button is click
and the editrow function is triggered, setting the editing state to true, this will show the form. it will also call the
setCurrentUser function, this should fill out the form with the wanted stuff

- the form should be pre filled out with  the current users information. this info is coming from props,which was set by the editRow
funciton that was called in the profile component once you hit the edit button. ok so now lets give this thing a try. I am
looking for an ugly form with the right data. ok so that works. very cool Now I need to see what happens when I click the update button.
- what i want to happen is for the profiles state to be updated
- so I currently am getting the edit form but I can not edit anything, I  think this means that there is a problem with the value.
 ok so Now I have everything up and ready to go. I just have to put in my validation again and then its just styling left.



-so right now I need to put in validation. so i really need to do is import my validation right ? because I can reuse it

- first off I need to understand what the hecl my validation is even doing.



- so onSubmit it gets the handleSubmit funtion from the useForm funciton which takes two arguments, props and a validate function
- The validate function is a function that declares an object and then just through basic if else statemnets it will determine if there is an error
or not. if there is then it will be assigned to that obejct and the object will be returned.

-so the use form function has all the functions that we need, it has handle input, on submit and the useEffect function that lets us run a function depending
on if there are any errors or not.

- so we need to import useForm from use form, we also need to import the validate function
- so we have the use form and we destructor the onSubmit, handelInput, user and error
- damn, so I do need this validation to do different things I think because of this we have to write another validation form. A little tedious but not the
worst thing in the world.

- so now we will be handling all the error validation with a new custom React hook
- so I need to figure out how the form gets prepopulated with values.
-initially we don't know what is being edited so we are going to to create an inital empty state. so when the edit button is clicked
the editRow function will set the current user but I think we are currently over riding that.
- right so the edit row function is setting the current user. We also have a current user sate the is in the App
- cool so we got the edit sorted back out. Now all we need to do is pass the user into the validation form.

- so now when we click edit, the edit row function will be launched. Which will set the current user to the one that we have clicked
- the current user is a state.
- everything just seems to be related to state and just a shit ton of boolean values. if this is hear do this, if it is not then do this


-so now we have run into a problem of editing the form
- on our handel input value we are calling set user and setUser has its value set to props.currentUser. The currentUser is what
is being set by the edit row.
-so everything seems to be looking normal now. I just need to put in the validation
- so update user also closes the page so we have to call that in the use effect hook.

- now We have the validation running, we are going to use the useEffect hook, but first I want to read up on it some more.
- Use useEffect lets you perform side effects like, data fetching setting up a subscription and manually changing the DOM.
- so in our case, we are trying to manually update the DOM.

- normally in React class components, the render method itself shouldn't cause side effects. it would be too early, you typicaly
want to perform our effects after React has updated the DOM. this is why side effects get put into componentDidMount.
- use effect will not block the browser from updating the screen.

- so when we use useEffect we will check if the errors object is empty, we check to see if an object is empty by pulling off the
keys, putting them into an array and seeing if that array is empty or not. If that array is empty then that means that there is no error

- so Now I think I finally have everything going, the last thing I need to do is create the styling, first I will start with the edit form.
- actually I should really just nail down how I want the form to look.
- so I guess I should read up on form design


FORM DESIGN:

form layouts: 6 best practices:
1) use a single-column layout
2) align copy to the left
3) one form a page, break the form up if too long
4) create a mobile friendly form
5) add inline form field labels
6)Use inline error messages

- so at least now we know a few things about forms
- but for some reason my css is not updating now
-should make the fields flat and the buttons raised.
make the fields look hollow: givenfields a border or inset shadow, even if only 1px, also eliminate background color.
make the buttons raised: include a drop shadow, rounded corners, use background color different from that used for both the page
and form fields
- making the form fields hollow means to give then a boxshadow with an inset value

- now we are using the css after effects. I will read up on what those even are.
- so they are pusedo elements that are used to place stuff either right after or right before the element
